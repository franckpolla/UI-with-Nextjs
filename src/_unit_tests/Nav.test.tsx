// Generated by CodiumAI
import { shallow } from "enzyme";

describe("Nav", () => {
  // Renders a navigation bar with a logo, links, and a login button.
  it("should render a navigation bar with a logo, links, and a login button", () => {
    // Arrange

    // Act
    const wrapper = shallow(<Nav />);

    // Assert
    expect(wrapper.find("nav")).toHaveLength(1);
    expect(wrapper.find("Image")).toHaveLength(1);
    expect(wrapper.find("ul")).toHaveLength(1);
    expect(wrapper.find("Button")).toHaveLength(1);
  });

  // Logo is a clickable link to the home page.
  it("should have a logo that is a clickable link to the home page", () => {
    // Arrange

    // Act
    const wrapper = shallow(<Nav />);
    const logoLink = wrapper.find("Link");

    // Assert
    expect(logoLink.prop("href")).toBe("/");
    expect(logoLink.find("Image")).toHaveLength(1);
  });

  // Links are displayed horizontally on desktop and hidden on mobile.
  it("should display links horizontally on desktop and hide them on mobile", () => {
    // Arrange

    // Act
    const wrapper = shallow(<Nav />);
    const ul = wrapper.find("ul");

    // Assert
    expect(ul.hasClass("hidden")).toBe(false);
    expect(ul.hasClass("md:flex")).toBe(true);
    expect(ul.hasClass("lg:hidden")).toBe(true);
  });

  // NAV_LINKS array is empty.
  it("should not render any links when NAV_LINKS array is empty", () => {
    // Arrange
    const originalNavLinks = NAV_LINKS;
    NAV_LINKS = [];

    // Act
    const wrapper = shallow(<Nav />);
    const ul = wrapper.find("ul");

    // Assert
    expect(ul.children()).toHaveLength(0);

    // Restore
    NAV_LINKS = originalNavLinks;
  });

  // NAV_LINKS array has duplicate keys.
  it("should throw an error when NAV_LINKS array has duplicate keys", () => {
    // Arrange
    const originalNavLinks = NAV_LINKS;
    NAV_LINKS = [
      { href: "/", key: "home", label: "Home" },
      { href: "/", key: "home", label: "Duplicate Key" },
    ];

    // Act & Assert
    expect(() => shallow(<Nav />)).toThrowError();

    // Restore
    NAV_LINKS = originalNavLinks;
  });

  // NAV_LINKS array has duplicate hrefs.
  it("should not throw an error when NAV_LINKS array has duplicate hrefs", () => {
    // Arrange
    const originalNavLinks = NAV_LINKS;
    NAV_LINKS = [
      { href: "/", key: "home", label: "Home" },
      { href: "/", key: "about", label: "About" },
    ];

    // Act & Assert
    expect(() => shallow(<Nav />)).not.toThrowError();

    // Restore
    NAV_LINKS = originalNavLinks;
  });
});
function shallow(arg0: React.JSX.Element) {
  throw new Error("Function not implemented.");
}
